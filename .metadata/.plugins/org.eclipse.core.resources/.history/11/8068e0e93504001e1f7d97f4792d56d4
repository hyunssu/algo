import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class BOJ_1197번_최소_스패닝_트리 {
	
	static int[] p; // 대표를 저장할 배열
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		StringTokenizer st = new StringTokenizer(br.readLine());
		// 정점의 개수
		int V = Integer.parseInt(st.nextToken());
		// 간선의 개수
		int E = Integer.parseInt(st.nextToken());
		
		// 간선의 배열을 저장
		int[][] edges = new int[E][3];
		for(int i = 0;  i < E; i++) {
			st = new StringTokenizer(br.readLine());
			edges[i][0] = Integer.parseInt(st.nextToken());
			edges[i][1] = Integer.parseInt(st.nextToken());
			edges[i][2] = Integer.parseInt(st.nextToken());
		}
		
		Arrays.sort(edges, new Comparator<int[]>() {

			public int compare(int[] o1, int[] o2) {
				return o1[2] - o2[2];
			}
		});
		
		// 대표를 저장헐 배열
		p = new int[V+1];
		for(int i = 1; i <= V; i++) {
			p[i] = i;
		}
		
		int ans = 0;
		int pick = 0;
		
		for(int i = 0; i < E; i++) {
			// i번째 간선을 뽑아서 두 정점의 대표를 확인한다.
			// 대표가 같다면 pass, 다르면 union (ans 추가 pick 추가)
			int px = findSet(edges[i][0]);
			int py = findSet(edges[i][1]);
			
			if(px != py) {
				union(px, py);
			}
		}
		
	}
	
	private static int findSet(int x) {
		if(x != p[x]) p[x] = findSet(p[x]);
		return p[x];
	}
	
	private static void union(int x, int y) {
		p[y] = x;
	}
	
}
