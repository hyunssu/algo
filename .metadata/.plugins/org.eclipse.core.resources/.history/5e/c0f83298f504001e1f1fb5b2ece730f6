package 백준;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_9328번_열쇠 {
	
	static int test, row, col;
	
	static int[] dr = {-1, 0, 1, 0};
	static int[] dc = {0, -1, 0, 1};
	
	static char[][] map;
	
	static Queue<int[]>  queue;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		test = Integer.parseInt(br.readLine());
		for(int t = 0; t < test; t++) 
		{
			
			StringTokenizer st = new StringTokenizer(br.readLine());
			row = Integer.parseInt(st.nextToken());
			col = Integer.parseInt(st.nextToken());
			
			map = new char[row+2][col+2];
			
			for(int c = 0; c < col + 2; c++) {
				map[0][c] = '*';
				map[row+1][c] = '*';
			}
			for(int r = 0; r < row + 2; r++) {
				map[r][0] ='*';
				map[r][col+1] = '*';
			}
			
			for(int r = 1; r <= row; r++) {
				String str = br.readLine();
				for(int c = 1; c <= col; c++) {
					map[r][c] = str.charAt(c-1);						
				}
			}
			
			System.out.println('a' - '0');
			br.readLine();
			// bfs로 모든 영역을 검사하는데?
			// 만약 문을 만나고 문을 열지 못한다면 일단 대기해야 하기 떄문에, 대기열 큐에 추가한다.
			// bfs를 1번 끝낸 후에, 대기열 큐를 확인하고, 대기열 큐로 다시 한 번 bfs를 한다.
			// 다시 한번 대기열 큐를 확인하는데?
			// boolean 값을 하나 적용해서 하나라도 문을 열 수 있다면,
			// boolean 값이 false가 될때까지 bfs를 진행한다.
			for(int r = 0; r < row; r++) {
				System.out.println(Arrays.toString(map[r]));
			}
			
			
			
		}
	}
}
