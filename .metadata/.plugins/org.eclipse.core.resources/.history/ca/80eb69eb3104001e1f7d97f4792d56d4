package algorithm;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
	
	static int N, M;
	static int MAX = Integer.MAX_VALUE;
	
	static int[] arr;
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		st = new StringTokenizer(br.readLine());
		arr = new int[N];
		for(int i = 0; i < N; i++)
			arr[i] = Integer.parseInt(st.nextToken());
		
		int left = 0;
		int right = 10000;
		
		while(left < right) {
			int mid = (left + right) / 2;
			if(solve(mid) <= M) {
				right = mid;
			} else {
				left = mid + 1;
			}
		}
		
		System.out.println(right);
	}

	private static int solve(int mid) {
		int count = 1;
		int min = arr[0];
		int max = arr[0];
		for(int i = 0; i < N; i++) {
			min = Math.min(min, arr[i]);
			max = Math.max(max, arr[i]);
			if(max - min > mid) {
				count++;
				max = arr[i];
				min = arr[i];
			}
		}
		return count;
	}
}