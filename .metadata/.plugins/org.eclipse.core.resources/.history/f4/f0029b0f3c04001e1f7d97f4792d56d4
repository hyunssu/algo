import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_16946번_벽_부수고_이동하기_4 {
	
	static int N, M;
	static int[][] map;
	
	static int[] dr = {-1, 0, 1, 0};
	static int[] dc = {0, -1, 0, 1};
	
	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int[N][M];
		
		for(int r = 0; r < N; r++) {
			String str = br.readLine();
			
			for(int c = 0; c < M; c++ ) {
				map[r][c] = Integer.parseInt(str[c]);				
			}
		}
		
		
		
		for(int r = 0; r < N; r++) {
			for(int c = 0; c < M; c++) {
				if(map[r][c] == 0) continue;
				map[r][c] = 0;
				countZero(r, c);
			}
		}
		
		for(int r = 0; r < N; r++) {
			for(int c = 0; c < M; c++) {
				System.out.print(map[r][c]);
			}
			System.out.println();
		}
		
		
	}
	
	private static void countZero(int r, int c) {
		Queue<int[]> q = new LinkedList<int[]>();
		boolean[][] visited = new boolean[N][M];
		q.add(new int[] {r, c});
		int count = 0;
		while(!q.isEmpty()) {
			count++;
			int[] temp = q.poll();
			visited[temp[0]][temp[1]] = true;
			for(int d = 0; d < 4; d++) {
				int nr = temp[0] + dr[d];
				int nc = temp[1] + dc[d];
				if(nr < 0 || nc < 0 || nr >= N || nc >= M || visited[nr][nc]) continue;
				if(map[nr][nc] == 0) {
					q.add(new int[] {nr, nc});
				}
			}
		}
		map[r][c] = count;
	}
}
